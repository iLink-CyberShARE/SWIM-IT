/*  Java code generated by apiwrapper for GAMS Version 24.7.4 */
package com.gams.api;

public class cfgm {
   public static final int cfgProc_none           = 0; /* cfgProcType */
   public static final int cfgProc_lp             = 1;
   public static final int cfgProc_mip            = 2;
   public static final int cfgProc_rmip           = 3;
   public static final int cfgProc_nlp            = 4;
   public static final int cfgProc_mcp            = 5;
   public static final int cfgProc_mpec           = 6;
   public static final int cfgProc_rmpec          = 7;
   public static final int cfgProc_cns            = 8;
   public static final int cfgProc_dnlp           = 9;
   public static final int cfgProc_rminlp         = 10;
   public static final int cfgProc_minlp          = 11;
   public static final int cfgProc_qcp            = 12;
   public static final int cfgProc_miqcp          = 13;
   public static final int cfgProc_rmiqcp         = 14;
   public static final int cfgProc_emp            = 15;
   public static final int cfgProc_nrofmodeltypes = 16;

   private long cfgPtr = 0;
   public native static int    GetReady (String[] msg);
   public native static int    GetReadyD(String dirName, String[] msg);
   public native static int    GetReadyL(String libName, String[] msg);
   public native int    Create   (String[] msg);
   public native int    CreateD  (String dirName, String[] msg);
   public native int    CreateL  (String libName, String[] msg);
   public native int    Free     ();
   public native int    ReadConfig(String filename);
   public native int    NumAlgs();
   public native int    DefaultAlg(int proc);
   public native boolean    AlgAllowsModifyProblem(int alg);
   public native int    AlgLibInfo(int alg, String []name, String []prefix);
   public native int    AlgThreadSafeIndic(int alg);
   public native int    AlgNumber(String id);
   public native boolean    AlgCapability(int alg, int proc);
   public native boolean    AlgCreate(int alg, long []psl, String sysDir, String []msg);
   public native int    AlgReadyAPI(int alg, long psl, long gmo, long opt);
   public native int    AlgModifyProblem(int alg, long psl);
   public native int    AlgCallSolver(int alg, long psl, long gmo);
   public native void    AlgFree(int alg, long []vpsl);
   public native int    ModelTypeNumber(String id);
   public native int    NumMsg();
   private native String    AlgName(int alg, String []sst_result);
   public String    AlgName(int alg) {
       String[] sst_result = new String[1];
       return    AlgName(alg, sst_result);
   }
   private native String    ModelTypeName(int proc, String []sst_result);
   public String    ModelTypeName(int proc) {
       String[] sst_result = new String[1];
       return    ModelTypeName(proc, sst_result);
   }
   private native String    GetMsg(String []sst_result);
   public String    GetMsg() {
       String[] sst_result = new String[1];
       return    GetMsg(sst_result);
   }
   public        long    GetcfgPtr(){ return cfgPtr;}
   public cfgm () { }
   public cfgm (long cfgPtr) {
      this.cfgPtr = cfgPtr;
   }
   static
   {
      String stem = "cfgmjni";
      String bitsuffix = "";
      if ( System.getProperty("os.arch").toLowerCase().indexOf("64") >= 0 ||
           System.getProperty("os.arch").toLowerCase().indexOf("sparcv9") >= 0 ) {
           bitsuffix = "64";
      }
 
      try  {
 
          System.loadLibrary(stem + bitsuffix);
 
      } catch (UnsatisfiedLinkError e1) {
          // no java.library.path has been set
          // try again with java.class.path
          String libraryFullPath = null;
          String classPath = null;
          try {
               String packageName = (Class.forName(cfgm.class.getName()).getPackage().getName());
               StringBuilder sb = new StringBuilder();
               String[] bs = packageName.split("\\.");
               for (String s : bs) {
                  sb.append(s);
                  sb.append("/");
               }
               sb.append(cfgm.class.getSimpleName());
               sb.append(".class");
               ClassLoader cl = cfgm.class.getClassLoader();
 
               classPath = cl.getResource(sb.toString()).getPath();
               sb.insert(0, "/");
               classPath = classPath.substring(0, classPath.lastIndexOf(sb.toString()));
               if (classPath.endsWith("!")) {
                   int index = classPath.lastIndexOf("/");
                   if (index >= 0)
                      classPath = classPath.substring(0, index);
               }
               if (classPath.indexOf("/") >= 0) {
                   classPath = classPath.substring(classPath.indexOf(":")+1,classPath.length());
               }
 
               String prefix = "";
               String suffix = "";
 
               String os = System.getProperty("os.name").toLowerCase();
               if (os.indexOf("win") >=0) {
                   suffix = ".dll";
               } else if (os.indexOf("mac") >= 0) {
                          prefix = "lib";
                          suffix = ".dylib";
               } else {
                    prefix = "lib";
                    suffix = ".so";
               }
 
               libraryFullPath = classPath + "/" + prefix + stem + bitsuffix + suffix ;
               if (os.indexOf("win") >=0) {
                   java.io.File apath = new java.io.File(libraryFullPath);
                   libraryFullPath = java.net.URLDecoder.decode(apath.getAbsolutePath(), "UTF-8");
                }
 
           } catch (Exception e2) {
               e2.printStackTrace();
               e1.printStackTrace();
               throw (e1);
           } finally {
               if (libraryFullPath == null)  {
                   e1.printStackTrace();
                   throw (e1);
               }
           }
 
           try {
 
                System.load(libraryFullPath);
 
           } catch (UnsatisfiedLinkError e3) {
               e3.printStackTrace();
               throw (e3);
           }
      }
   }
}
