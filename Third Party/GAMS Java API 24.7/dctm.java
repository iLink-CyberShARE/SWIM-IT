/*  Java code generated by apiwrapper for GAMS Version 24.7.4 */
package com.gams.api;

public class dctm {
   public static final int dctunknownSymType = 0; /* dcttypes */
   public static final int dctfuncSymType    = 1;
   public static final int dctsetSymType     = 2;
   public static final int dctacrSymType     = 3;
   public static final int dctparmSymType    = 4;
   public static final int dctvarSymType     = 5;
   public static final int dcteqnSymType     = 6;
   public static final int dctaliasSymType   = 127;

   private long dctPtr = 0;
   public native static int    GetReady (String[] msg);
   public native static int    GetReadyD(String dirName, String[] msg);
   public native static int    GetReadyL(String libName, String[] msg);
   public native int    Create   (String[] msg);
   public native int    CreateD  (String dirName, String[] msg);
   public native int    CreateDD (String dirName, String[] msg);
   public native int    CreateL  (String libName, String[] msg);
   public native int    Free     ();
   public native int    LoadEx(String fName, String []Msg);
   public native int    LoadWithHandle(long gdxptr, String []Msg);
   public native int    NUels();
   public native int    UelIndex(String uelLabel);
   public native int    UelLabel(int uelIndex, char []q, String []uelLabel);
   public native int    NLSyms();
   public native int    SymDim(int symIndex);
   public native int    SymIndex(String symName);
   public native int    SymName(int symIndex, String []symName);
   public native int    SymText(int symIndex, char []q, String []symTxt);
   public native int    SymType(int symIndex);
   public native int    SymUserInfo(int symIndex);
   public native int    SymEntries(int symIndex);
   public native int    SymOffset(int symIndex);
   public native int    ColIndex(int symIndex, int []uelIndices);
   public native int    RowIndex(int symIndex, int []uelIndices);
   public native int    ColUels(int j, int []symIndex, int []uelIndices, int []symDim);
   public native int    RowUels(int i, int []symIndex, int []uelIndices, int []symDim);
   public native long    FindFirstRowCol(int symIndex, int []uelIndices, int []rcIndex);
   public native int    FindNextRowCol(long findHandle, int []rcIndex);
   public native void    FindClose(long findHandle);
   public native double    MemUsed();
   public native void    SetBasicCounts(int NRows, int NCols, int NBlocks);
   public native void    AddUel(String uelLabel, char q);
   public native void    AddSymbol(String symName, int symTyp, int symDim, int userInfo, String symTxt);
   public native void    AddSymbolData(int []uelIndices);
   public native void    WriteGDX(String fName, String []Msg);
   public native void    WriteGDXWithHandle(long gdxptr, String []Msg);
   public native int    NRows();
   public native int    NCols();
   public native int    LrgDim();
   public        long    GetdctPtr(){ return dctPtr;}
   public dctm () { }
   public dctm (long dctPtr) {
      this.dctPtr = dctPtr;
   }
   static
   {
      String stem = "dctmjni";
      String bitsuffix = "";
      if ( System.getProperty("os.arch").toLowerCase().indexOf("64") >= 0 ||
           System.getProperty("os.arch").toLowerCase().indexOf("sparcv9") >= 0 ) {
           bitsuffix = "64";
      }
 
      try  {
 
          System.loadLibrary(stem + bitsuffix);
 
      } catch (UnsatisfiedLinkError e1) {
          // no java.library.path has been set
          // try again with java.class.path
          String libraryFullPath = null;
          String classPath = null;
          try {
               String packageName = (Class.forName(dctm.class.getName()).getPackage().getName());
               StringBuilder sb = new StringBuilder();
               String[] bs = packageName.split("\\.");
               for (String s : bs) {
                  sb.append(s);
                  sb.append("/");
               }
               sb.append(dctm.class.getSimpleName());
               sb.append(".class");
               ClassLoader cl = dctm.class.getClassLoader();
 
               classPath = cl.getResource(sb.toString()).getPath();
               sb.insert(0, "/");
               classPath = classPath.substring(0, classPath.lastIndexOf(sb.toString()));
               if (classPath.endsWith("!")) {
                   int index = classPath.lastIndexOf("/");
                   if (index >= 0)
                      classPath = classPath.substring(0, index);
               }
               if (classPath.indexOf("/") >= 0) {
                   classPath = classPath.substring(classPath.indexOf(":")+1,classPath.length());
               }
 
               String prefix = "";
               String suffix = "";
 
               String os = System.getProperty("os.name").toLowerCase();
               if (os.indexOf("win") >=0) {
                   suffix = ".dll";
               } else if (os.indexOf("mac") >= 0) {
                          prefix = "lib";
                          suffix = ".dylib";
               } else {
                    prefix = "lib";
                    suffix = ".so";
               }
 
               libraryFullPath = classPath + "/" + prefix + stem + bitsuffix + suffix ;
               if (os.indexOf("win") >=0) {
                   java.io.File apath = new java.io.File(libraryFullPath);
                   libraryFullPath = java.net.URLDecoder.decode(apath.getAbsolutePath(), "UTF-8");
                }
 
           } catch (Exception e2) {
               e2.printStackTrace();
               e1.printStackTrace();
               throw (e1);
           } finally {
               if (libraryFullPath == null)  {
                   e1.printStackTrace();
                   throw (e1);
               }
           }
 
           try {
 
                System.load(libraryFullPath);
 
           } catch (UnsatisfiedLinkError e3) {
               e3.printStackTrace();
               throw (e3);
           }
      }
   }
}
