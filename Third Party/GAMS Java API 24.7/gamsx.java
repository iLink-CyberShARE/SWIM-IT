/*  Java code generated by apiwrapper for GAMS Version 24.7.4 */
package com.gams.api;

public class gamsx {
   private long gamsxPtr = 0;
   public native static int      GetReady (String[] msg);
   public native static int      GetReadyD(String dirName, String[] msg);
   public native static int      GetReadyL(String libName, String[] msg);
   public native int      Create   (String[] msg);
   public native int      CreateD  (String dirName, String[] msg);
   public native int      CreateL  (String libName, String[] msg);
   public native int      Free     ();
   public native int      RunExecDLL(long optPtr, String sysDir, int AVerbose, String []Msg);
   public native boolean      ShowError(String fNameLog, String []errorLine, String []errorTyp, String []gmsLine);
   public native void      AddBreakPoint(String fn, int lineNr);
   public native void      ClearBreakPoints();
   public native int      SystemInfo(int []NrSy, int []NrUel);
   public native int      SymbolInfo(int SyNr, String []SyName, String []SyExplTxt, int []SyDim, int []SyTyp, int []SyCount, int []SyUserInfo);
   public native int      FindSymbol(String SyName);
   public native int      DataReadRawStart(int SyNr, int []SyCount);
   public native int      DataReadRaw(int []Elements, double []Vals, int []FDim);
   public native int      DataReadDone();
   public native int      DataWriteRawStart(int SyNr, boolean DoMerge);
   public native int      DataWriteRaw(int []Elements, double []Vals);
   public native int      DataWriteDone();
   public native void      RegisterCB1(String CB1, long userMem);
   public native void      RegisterCB2(String CB2, long userMem1, long userMem2);
   public native String      GetCB1();
   public native String      GetCB2();
   public native long      GetCB1UM();
   public native long      GetCB2UM1();
   public native long      GetCB2UM2();
   public native void      SWSet(int x);
   public native boolean      StepThrough();
   public native void      StepThroughSet(boolean x);
   public native boolean      RunToEnd();
   public native void      RunToEndSet(boolean x);
   public native boolean      CB1Defined();
   public native boolean      CB2Defined();
   private native String      UelName(int uel, String []sst_result);
   public String      UelName(int uel) {
       String[] sst_result = new String[1];
       return      UelName(uel, sst_result);
   }
   public        long      GetgamsxPtr(){ return gamsxPtr;}
   public gamsx () { }
   public gamsx (long gamsxPtr) {
      this.gamsxPtr = gamsxPtr;
   }
   static
   {
      String stem = "gamsxjni";
      String bitsuffix = "";
      if ( System.getProperty("os.arch").toLowerCase().indexOf("64") >= 0 ||
           System.getProperty("os.arch").toLowerCase().indexOf("sparcv9") >= 0 ) {
           bitsuffix = "64";
      }
 
      try  {
 
          System.loadLibrary(stem + bitsuffix);
 
      } catch (UnsatisfiedLinkError e1) {
          // no java.library.path has been set
          // try again with java.class.path
          String libraryFullPath = null;
          String classPath = null;
          try {
               String packageName = (Class.forName(gamsx.class.getName()).getPackage().getName());
               StringBuilder sb = new StringBuilder();
               String[] bs = packageName.split("\\.");
               for (String s : bs) {
                  sb.append(s);
                  sb.append("/");
               }
               sb.append(gamsx.class.getSimpleName());
               sb.append(".class");
               ClassLoader cl = gamsx.class.getClassLoader();
 
               classPath = cl.getResource(sb.toString()).getPath();
               sb.insert(0, "/");
               classPath = classPath.substring(0, classPath.lastIndexOf(sb.toString()));
               if (classPath.endsWith("!")) {
                   int index = classPath.lastIndexOf("/");
                   if (index >= 0)
                      classPath = classPath.substring(0, index);
               }
               if (classPath.indexOf("/") >= 0) {
                   classPath = classPath.substring(classPath.indexOf(":")+1,classPath.length());
               }
 
               String prefix = "";
               String suffix = "";
 
               String os = System.getProperty("os.name").toLowerCase();
               if (os.indexOf("win") >=0) {
                   suffix = ".dll";
               } else if (os.indexOf("mac") >= 0) {
                          prefix = "lib";
                          suffix = ".dylib";
               } else {
                    prefix = "lib";
                    suffix = ".so";
               }
 
               libraryFullPath = classPath + "/" + prefix + stem + bitsuffix + suffix ;
               if (os.indexOf("win") >=0) {
                   java.io.File apath = new java.io.File(libraryFullPath);
                   libraryFullPath = java.net.URLDecoder.decode(apath.getAbsolutePath(), "UTF-8");
                }
 
           } catch (Exception e2) {
               e2.printStackTrace();
               e1.printStackTrace();
               throw (e1);
           } finally {
               if (libraryFullPath == null)  {
                   e1.printStackTrace();
                   throw (e1);
               }
           }
 
           try {
 
                System.load(libraryFullPath);
 
           } catch (UnsatisfiedLinkError e3) {
               e3.printStackTrace();
               throw (e3);
           }
      }
   }
}
